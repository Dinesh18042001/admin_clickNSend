{"version":3,"file":"static/js/308.chunk.js","mappings":"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","sources":["Admin/Pages/reviews/Reviews.js"],"sourcesContent":["import React, { Component, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport \"../../admin.css\";\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\nimport Sidebar from \"../../SideNav/sideBar\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { OverlayTrigger, Popover } from \"react-bootstrap\";\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Stack,\n  FormControl,\n  Select,\n  MenuItem,\n  TextField,\n  Pagination,\n  PaginationItem,\n} from \"@mui/material\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MdRemoveRedEye, MdDelete, MdMode } from \"react-icons/md\";\nimport CustomSnackbar from \"../../../Components/notify/Snackbar\";\nimport { apiAdminConfig } from \"../../../utils/api\";\nimport Nodata from \"../../../Components/nodata/Nodata\";\nimport Popup from \"../../../Components/popup/Popup\";\nimport Loader from \"../../../Components/Loader/Loader\";\n\nconst Contant = () => {\n  const navigate = useNavigate();\n  const [data, setData] = React.useState([]);\n\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const [query, setQuery] = useState(\"\");\n  const [filterState, setFilterState] = useState([]);\n  const [filterCity, setfilterCity] = useState([]);\n  const [filterdeptName, setfilterdeptName] = useState([]);\n  const [snackData, setsnackdata] = React.useState({\n    open: false,\n    message: \"\",\n    status: \"\",\n  });\n  const [open, setOpen] = useState(false);\n  const [page, setPage] = React.useState(1);\n  const [pageCount, setPageCount] = React.useState(0);\n  const [pageSize, setPageSize] = React.useState(10);\n  const [pageData, setPageData] = React.useState({});\n  let tablehead = [\"S/N\", \"Name\", \"Rating\", \"Review\",\"Action\"];\n  const [search, setSearch] = useState(\"\");\n\n  const handlePageChange = (event, value) => {\n    setPage(value);\n  };\n\n  const handlePageSizeChange = (event) => {\n    setPageSize(event.target.value);\n  };\n  const fetchdata = async (value) => {\n    // setLoading(true);\n    await apiAdminConfig\n      .get(\"api/auth/master/testimonial/list\", {\n        params: {\n          search: value,\n          per_page: pageSize,\n          page: page,\n        },\n      })\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"response?.data\", response?.data);\n          setPageCount(response?.data?.view_data?.last_page);\n          setPageSize(response?.data?.view_data?.per_page);\n          setPageData(response?.data?.view_data);\n\n          setPosts(response?.data?.view_data?.data);\n          setLoading(false);\n        }\n      })\n      .catch((error) => {\n        console.log(\"error\", error);\n      });\n  };\n\n  React.useEffect(() => {\n    fetchdata();\n  }, []);\n  React.useEffect(() => {\n    fetchdata(search);\n  }, [search, page, pageSize]);\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updateStatus = async (id, status) => {\n    setsnackdata({\n      open: false,\n      message: \"\",\n      status: \"success\",\n    });\n\n    if (!status) {\n      await apiAdminConfig\n        .get(`api/auth/master/blog/active/${id}`)\n        .then((response) => {\n          if (response && response?.status === 200) {\n            fetchdata();\n            setTimeout(() => {\n              setsnackdata({\n                open: true,\n                message: response.data.message,\n                status: \"success\",\n              });\n            }, 1000);\n            // window.location.reload();\n          }\n        })\n        .catch((error) => {\n          console.log(\"error---->\", error);\n        });\n    } else {\n      await apiAdminConfig\n        .get(`api/auth/master/blog/deactive/${id}`)\n        .then((response) => {\n          if (response && response?.status === 200) {\n            fetchdata();\n            setTimeout(() => {\n              setsnackdata({\n                open: true,\n                message: response.data.message,\n                status: \"success\",\n              });\n            }, 1000);\n            // window.location.reload();\n          }\n        })\n        .catch((error) => {\n          console.log(\"error---->\", error);\n        });\n    }\n  };\n\n  //handle Delete function\n  const handleDelete = async (id) => {\n    setOpen(id);\n  };\n\n  // Get current Posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n\n  //Change Page\n  const paginate = (pagenumber) => {\n    setCurrentPage(pagenumber);\n  };\n\n  const [age, setAge] = React.useState(10);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n\n  const handleChange = (event) => {\n    setAge(event.target.value);\n  };\n\n  const handleSelectClose = () => {\n    setSelectOpen(false);\n  };\n\n  const handleOpen = () => {\n    setSelectOpen(true);\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <CustomSnackbar value={snackData} />\n          <Card\n            sx={{\n              boxShadow: \"none!important\",\n              borderRadius: \"20px!important\",\n              mt: 4,\n            }}\n          >\n            <CardContent>\n              <Stack direction=\"row\" justifyContent=\"space-between\" mb={8}>\n                <Box>\n                  <Typography\n                    component=\"h3\"\n                    sx={{ fontSize: \"30px\", fontWeight: 500 }}\n                  >\n                 Testimonials\n                  </Typography>\n                </Box>\n                <Box>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    sx={{\n                      textTransform: \"none\",\n                      borderRadius: \"15px\",\n                      padding: \"0.875rem 1.5rem\",\n                      fontSize: \"14px !important\",\n                      lineHeight: \"1\",\n                      // \":hover\": {\n                      //   background: (theme) => theme.palette?.primary?.main,\n                      //   color: (theme) =>\n                      //     `${theme?.palette?.common?.white}!important`,\n                      // },\n                    }}\n                    startIcon={<AddIcon color=\"primary\" />}\n                    onClick={() => {\n                      navigate(`/master/review/testimonials/create`);\n                    }}\n                  >\n                    Add\n                  </Button>\n                </Box>\n              </Stack>\n              <Stack\n                direction=\"row\"\n                justifyContent=\"space-between\"\n                mb={2}\n                mt={4}\n                alignItems=\"center\"\n              >\n                <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                  <Typography sx={{ fontSize: \"13px\" }}>Show</Typography>\n                  <FormControl size=\"small\">\n                    <Select\n                      sx={{ fontSize: \"13px\" }}\n                      open={selectOpen}\n                      onClose={handleSelectClose}\n                      onOpen={handleOpen}\n                      value={pageSize}\n                      onChange={handlePageSizeChange}\n                    >\n                      <MenuItem sx={{ fontSize: \"13px\" }} value={10}>\n                        10\n                      </MenuItem>\n                      <MenuItem sx={{ fontSize: \"13px\" }} value={25}>\n                        25\n                      </MenuItem>\n                      <MenuItem sx={{ fontSize: \"13px\" }} value={50}>\n                        50\n                      </MenuItem>\n                      <MenuItem sx={{ fontSize: \"13px\" }} value={100}>\n                        100\n                      </MenuItem>\n                    </Select>\n                  </FormControl>\n                  <Typography sx={{ fontSize: \"13px\" }}>entries</Typography>\n                </Stack>\n\n\n                <Box>\n                  <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                    <Typography sx={{ fontSize: \"13px\" }}>Search :</Typography>\n                    <FormControl size=\"small\">\n                      <TextField\n                        sx={{ fontSize: \"13px\" }}\n                        size=\"small\"\n                        id=\"outlined-controlled\"\n                        // label=\"Controlled\"\n                        value={search}\n                        onChange={(event) => {\n                          setSearch(event.target.value);\n                        }}\n                      />\n                    </FormControl>\n                  </Stack>\n                </Box>\n\n                \n              </Stack>\n              <div>\n                <Box sx={{ mt: 4, minHeight: \"100%\" }}>\n                  {posts && posts.length !== 0 ? (\n                    <Table size=\"lg\" responsive>\n                      <thead\n                        style={{\n                          // backgroundColor: \"#F0F1F2\",\n                          color: \"#fff\",\n                          padding: \"10px\",\n                          backgroundColor: \"#FF7534\",\n                          textAlign: \"left\",\n                          width: \"100%\",\n                        }}\n                      >\n                        <tr style={{ width: \"100%\" }}>\n                          {tablehead.map((el, id) => {\n                            return (\n                              <th\n                                key={id}\n                                style={{\n                                  textAlign: \"center\",\n                                  verticalAlign: \"middle\",\n                                  fontSize: \"14px\",\n                                }}\n                              >\n                                {el}\n                              </th>\n                            );\n                          })}\n                        </tr>\n                      </thead>\n                      <tbody style={{ textAlign: \"left\", fontSize: \"14px\" }}>\n                        {posts &&\n                          posts?.map((el, id) => {\n                            return (\n                              <tr\n                                key={id}\n                                style={{\n                                  fontSize: \"14px\",\n                                }}\n                              >\n                                <td\n                                  style={{\n                                    fontSize: \"14px\",\n                                    textAlign: \"center\",\n                                    verticalAlign: \"middle\",\n                                  }}\n                                >\n                                  {id + 1}\n                                </td>\n                                <td\n                                  style={{\n                                    fontSize: \"14px\",\n                                    textAlign: \"center\",\n                                    verticalAlign: \"middle\",\n                                  }}\n                                 \n                                >\n                                  {el.name || \"N/A\"}\n                                </td>\n                                <td\n                                  style={{\n                                    fontSize: \"14px\",\n                                    textAlign: \"center\",\n                                    verticalAlign: \"middle\",\n                                  }}\n                                >\n                                  {el.rating || \"N/A\"}\n                                </td>\n                                <td\n                                  style={{\n                                    fontSize: \"14px\",\n                                    textAlign: \"center\",\n                                    verticalAlign: \"middle\",\n                                  }}\n                                >\n                                  {el.text || \"N/A\"}\n                                </td>\n                                {/* <td style={{ width: \"20vh\" }}>\n                              {moment(el?.createdAt).format(\"DD/MM/YYYY\")}\n                            </td> */}\n                                <td style={{ textAlign: \"center\" }}>\n                                  <Dropdown>\n                                    <OverlayTrigger\n                                      rootClose\n                                      trigger=\"click\"\n                                      placement=\"bottom\"\n                                      overlay={\n                                        <Popover id=\"popover-basic\">\n                                          <Popover.Body>\n                                            <Stack gap={2}>\n\n                                              {/* <Dropdown.Item\n                                                onClick={(e) => {\n                                                  navigate(\n                                                    `/master/blog/testimonial/view/${el.id}`\n                                                  );\n                                                }}\n                                              >\n                                                <MdRemoveRedEye size={18} />{\" \"}\n                                                View\n                                              </Dropdown.Item> */}\n                                              {/* <Button\n                                                // disabled\n                                                size=\"sm\"\n                                                variant=\"success\"\n                                                onClick={() => {\n                                                  // update status\n                                                  updateStatus(\n                                                    el.id,\n                                                    el?.status\n                                                  );\n                                                }}\n                                                style={\n                                                  el?.status\n                                                    ? {\n                                                        // green\n                                                        backgroundColor:\n                                                          \"rgb(12 168 48)\",\n                                                        opacity: \"0.7\",\n                                                        color: \"#fff\",\n                                                        borderColor: \"#28a745\",\n                                                        width: \"10vh\",\n                                                        fontSize: \"12px\",\n                                                        lineHeight: \"1.5\",\n                                                        borderRadius: \".2rem\",\n                                                        padding:\n                                                          \".375rem .75rem\",\n                                                      }\n                                                    : {\n                                                        // grey\n                                                        backgroundColor:\n                                                          \"#6c757d\",\n                                                        opacity: \"0.7\",\n                                                        color: \"#fff\",\n                                                        borderColor: \"#6c757d\",\n                                                        width: \"10vh\",\n                                                        fontSize: \"12px\",\n                                                        lineHeight: \"1.5\",\n                                                        borderRadius: \".2rem\",\n                                                        padding:\n                                                          \".375rem .75rem\",\n                                                      }\n                                                }\n                                              >\n                                                {el?.status\n                                                  ? \"ACTIVE\"\n                                                  : \"INACTIVE\"}\n                                              </Button> */}\n\n                                              <Dropdown.Item\n                                                onClick={() => {\n                                                  navigate(\n                                                    `/master/review/testimonials/${el.id}`\n                                                  );\n                                                }}\n                                              >\n                                                <MdMode size={18} /> Edit\n                                              </Dropdown.Item>\n                                              <Dropdown.Item\n                                                onClick={() => {\n                                                  handleDelete(el.id);\n                                                }}\n                                              >\n                                                <MdDelete size={18} /> Delete\n                                              </Dropdown.Item>\n                                            </Stack>\n                                          </Popover.Body>\n                                        </Popover>\n                                      }\n                                    >\n                                      <Dropdown.Toggle\n                                        variant=\"light\"\n                                        id=\"dropdown-basic\"\n                                      >\n                                        <BsThreeDotsVertical />\n                                      </Dropdown.Toggle>\n                                    </OverlayTrigger>\n                                  </Dropdown>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                      </tbody>\n                    </Table>\n                  ) : (\n                    <div>\n                      <Nodata />\n                    </div>\n                  )}\n                </Box>\n                <Box\n                  style={{\n                    backgroundColor: \"#fff\",\n                    color: \"#000\",\n                    padding: \"0px\",\n                    borderTop: \"0px\",\n                  }}\n                >\n                  <div className=\"justify-content-between flex-wrap d-flex align-items-center\">\n                    <Typography\n                      className=\"footer-text\"\n                      sx={{ fontSize: \"14px\" }}\n                    >\n                      Showing {pageData?.from}-{pageData?.to} of{\" \"}\n                      {pageData?.total} entries\n                    </Typography>\n                    <Pagination\n                      count={pageCount}\n                      color=\"primary\"\n                      page={page}\n                      onChange={handlePageChange}\n                      variant=\"outlined\"\n                      shape=\"rounded\"\n                      renderItem={(item) => (\n                        <PaginationItem\n                          slots={{\n                            previous: () => {\n                              return (\n                                <Typography sx={{ fontSize: \"14px\" }}>\n                                  Previous\n                                </Typography>\n                              );\n                            },\n                            next: () => {\n                              return (\n                                <Typography sx={{ fontSize: \"14px\" }}>\n                                  Next\n                                </Typography>\n                              );\n                            },\n                          }}\n                          {...item}\n                        />\n                      )}\n                    />\n\n                    {/* <TablePagination\n                      sx={{ fontSize: \"14px\" }}\n                      postsPerPage={postsPerPage}\n                      totalPosts={posts.length}\n                      paginate={paginate}\n                    /> */}\n                  </div>\n                </Box>\n                {open && (\n                  <Popup\n                    title=\"Add Blog\"\n                    id={open}\n                    handleClose={handleClose}\n                    handleDelete={handleClose}\n                    fetchdata={fetchdata}\n                    setsnackdata={setsnackdata}\n                    setOpen={setOpen}\n                    actionURL=\"api/auth/master/testimonial/delete\"\n                  />\n                )}\n              </div>{\" \"}\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </>\n  );\n};\n\nclass AddTestimonials extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: window.innerWidth,\n    };\n  }\n  render() {\n    return (\n      <div>\n        {this.state.windowWidth >= 600 ? (\n          <Sidebar>\n            <Contant />\n          </Sidebar>\n        ) : (\n          <div style={{ width: \"95%\", margin: \"80px auto\" }}>\n            {\" \"}\n            <Contant />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AddTestimonials;\n"],"names":["Contant","navigate","useNavigate","data","setData","React","posts","setPosts","useState","loading","setLoading","currentPage","setCurrentPage","postsPerPage","query","setQuery","filterState","setFilterState","filterCity","setfilterCity","filterdeptName","setfilterdeptName","snackData","setsnackdata","open","message","status","setOpen","page","setPage","pageCount","setPageCount","pageSize","setPageSize","pageData","setPageData","search","setSearch","fetchdata","async","apiAdminConfig","get","params","value","per_page","then","response","_response$data","_response$data$view_d","_response$data2","_response$data2$view_","_response$data3","_response$data4","_response$data4$view_","console","log","view_data","last_page","catch","error","handleClose","age","setAge","selectOpen","setSelectOpen","_jsx","_Fragment","children","Loader","_jsxs","CustomSnackbar","Card","sx","boxShadow","borderRadius","mt","CardContent","Stack","direction","justifyContent","mb","Box","Typography","component","fontSize","fontWeight","Button","variant","color","textTransform","padding","lineHeight","startIcon","AddIcon","onClick","alignItems","spacing","FormControl","size","Select","onClose","handleSelectClose","onOpen","handleOpen","onChange","event","target","MenuItem","TextField","id","minHeight","length","Table","responsive","style","backgroundColor","textAlign","width","map","el","verticalAlign","name","rating","text","Dropdown","OverlayTrigger","rootClose","trigger","placement","overlay","Popover","Body","gap","Item","concat","MdMode","handleDelete","MdDelete","Toggle","BsThreeDotsVertical","Nodata","borderTop","className","from","to","total","Pagination","count","handlePageChange","shape","renderItem","item","PaginationItem","slots","previous","next","Popup","title","actionURL","AddTestimonials","Component","constructor","props","super","this","state","windowWidth","window","innerWidth","render","Sidebar","margin"],"sourceRoot":""}